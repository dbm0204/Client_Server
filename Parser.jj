/* ------------------------------------------------------------------------- */
/*   Copyright (C) 2016 
Author:  bmathew2014@my.fit.edu
Author:  rbabbitt2014@my.fit.edu
Florida Tech, Computer Science

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published 
by the Free Software Foundation; either the current version of the 
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.              */

options {
    STATIC = false;
}

PARSER_BEGIN(Parser)


import net.ddp2p.ASN1.*;
import java.util.ArrayList;
import java.util.Arrays;

import java.io.BufferedWriter;
import java.io.InputStream;
import java.io.OutputStream;

import java.net.InetAddress;
import java.net.DatagramSocket;
import java.net.DatagramPacket;
import java.net.Socket;

public class Parser {
  String ip = null;
  int port = 0;
  boolean isTCP = true;
  
  public static void main(String args[]) {
  }
  
  public void setServer(String ip, int port, boolean isTCP) {
    this.ip = ip;
    this.port = port;
    this.isTCP = isTCP;
  }
}

PARSER_END(Parser)

/*  COMMANDS    */
TOKEN: {
  <PROJECT_DEFINITION: "PROJECT_DEFINITION">
| <TASKS: "TASKS">
| <TAKE: "TAKE">
| <USER: "USER">
| <PROJECT: "PROJECT">
| <GET_PROJECTS: "GET_PROJECTS">
| <GET_PROJECT: "GET_PROJECT">
| <EXIT: "EXIT">
}


/*  TIME    */
TOKEN: {
  <#YEAR: <DIGIT><DIGIT><DIGIT><DIGIT>>
| <#MONTH: "0"["0"-"9"] | "1"["0"-"2"]>
| <#DAY: <DIGIT><DIGIT>>
| <#DATE: <YEAR>"-"<MONTH>"-"<DAY>>
| <#HOUR: (["0"-"5"]["0"-"9"] | "60")"h">
| <#MINUTES:(["0"-"5"]["0"-"9"] | "60")"m">
| <#SECONDS: (["0"-"5"]["0"-"9"] | "60")"s">
| <#MILISECONDS: <DIGIT><DIGIT><DIGIT>"Z">
| <#TIME: <HOUR><MINUTES><SECONDS><MILISECONDS>>
| <DATETIME: <DATE>":"<TIME>>
}

TOKEN: {
  <EOL: "\n" | "\r" | "\r\n" >
| <END: ";">
| <COLON: ":">
| <DIGIT: ["0"-"9"]>
| <LETTER: ["a"-"z", "A"-"Z"]>
| <VARIABLE: <LETTER> (<LETTER> | <DIGIT> | " ")* >
| <SPECIAL: ~[] >
}


void parse(): 
{}
{
    try {
        (<GET_PROJECT><END> { get_project(); }
        |<PROJECT_DEFINITION><COLON>{ project_definition(); }
        |<TAKE><END> { take(); }
        |<GET_PROJECTS> { get_projects(); }
        |{ return; }) 
        <EOL> { parse(); }
    } catch (ParseException e) {
        Token token=null;
        do {
            token = getNextToken();
        } while (token.kind != EOL);
    }
}

void project_definition():
{ Token proj=null, tasks=null; ASNProject project; }
{
    proj=<VARIABLE><END>
    <TASKS><COLON> tasks=<DIGIT><END>
    {
        project = new ASNProject(proj.toString());
    }
    (task(project))*
    {
        ASNEvent event = new ASNEvent(ASNEvent.PROJECT, project);
        send(event.encode());
    }
}

void task(ASNProject project):
{ Token task=null, start=null, end=null; boolean success=false; }
{
    task=<VARIABLE><END>
    start=<DATETIME><END>
    end=<DATETIME><END>
    { 
        project.addTask(new ASNTask(task.toString(),
                                    start.toString(),
                                    end.toString()));
    }
}

void take():
{ Token user=null, proj=null, task=null; boolean success=false; }
{
    <USER><COLON> user=<VARIABLE> <END>
    <PROJECT><COLON> proj=<VARIABLE> <END>
    task=<VARIABLE>
    {
        ASNTake take;
        take = new ASNTake(proj.toString(), task.toString(), user.toString());
        ASNEvent event = new ASNEvent(ASNEvent.TAKE, take);
        send(event.encode());
    }
}

void get_projects():
{}
{
    {
        ASNProjects getProjects = new ASNProjects();
        ASNEvent event = new ASNEvent(ASNEvent.PROJECTS, getProjects);
        send(event.encode());
    }
}

void get_project():
{ Token project=null; }
{
    project=<VARIABLE>
    {
        ASNProject getProject = new ASNProject(project.toString());
        ASNEvent event = new ASNEvent(ASNEvent.GETPROJECT, getProject);
        send(event.encode());
    } 
}

void send(byte[] msg):
{}
{
    {
        if(isTCP) {
            sendTCP(msg);  
        } else {
            sendUDP(msg);
        }
    }   
}

void sendTCP(byte[] msg):
{ Socket socket = null; }
{
    {
        assert(ip != null);
        try {
            socket = new Socket(ip, port);
            InputStream reader = socket.getInputStream();
            OutputStream out = socket.getOutputStream();
            out.write(msg);
            out.flush();

             byte[] buffer = new byte[10000];
             int readBytes = reader.read(buffer);
             Decoder decoder = new Decoder(Arrays.copyOfRange(buffer, 0, readBytes));
             ASNEvent event = new ASNEvent().decode(decoder);
             System.out.println(event.toString());
             socket.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }   
}

void sendUDP(byte[] msg):
{DatagramSocket socket = null; DatagramPacket packet = null;}
{
    {
        assert(ip != null);
        try {
            socket = new DatagramSocket();
            InetAddress IpAddress = InetAddress.getByName(ip);
            packet = new DatagramPacket(msg, msg.length, IpAddress, port);
            socket.send(packet);
            
            byte[] buffer = new byte[10000];
            packet = new DatagramPacket(buffer, buffer.length);
            socket.receive(packet);
            
            Decoder decoder = new Decoder(buffer);
            ASNEvent event = new ASNEvent().decode(decoder);
            System.out.println(event.toString());
            socket.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }   
}


